from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MENU, MODEL, PHOTO, CONTACT = range(4)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç inline-–º–µ–Ω—é
async def send_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="choose_model")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="add_photo")],
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", callback_data="share_contact")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback_query
    if hasattr(update_or_query, "callback_query") and update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é; –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ;",
            reply_markup=markup
        )
    else:
        await update_or_query.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é; –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ;",
            reply_markup=markup
        )
    return MENU

# –°—Ç–∞—Ä—Ç: —Å—Ä–∞–∑—É –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await send_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "choose_model":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞;")
        return MODEL
    if query.data == "add_photo":
        await query.edit_message_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üìé¬ª;")
        return PHOTO
    if query.data == "share_contact":
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        kb = [[KeyboardButton("üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
        rm = ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
        await query.edit_message_text("üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —Å–ø—Ä–∞–≤–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç üì≤")
        # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        await query.message.reply_text("üëá", reply_markup=rm)
        return CONTACT

# –®–∞–≥ MODEL ‚Üí –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
async def model_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['model'] = update.message.text
    await update.message.reply_text(f"–ú–æ–¥–µ–ª—å {update.message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞;")
    return await send_menu(update, context)

# –®–∞–≥ PHOTO ‚Üí –∏ —Å–Ω–æ–≤–∞ –º–µ–Ω—é
async def photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import os
    os.makedirs('photos', exist_ok=True)
    photo = update.message.photo[-1]
    file = await photo.get_file()
    path = f"photos/{update.effective_user.id}_{photo.file_unique_id}.jpg"
    await file.download_to_drive(path)
    context.user_data['photo_path'] = path

    await update.message.reply_text("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ;")
    return await send_menu(update, context)

# –®–∞–≥ CONTACT ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º
async def contact_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact.phone_number
    context.user_data['contact'] = contact
    await update.message.reply_text(
        "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω; –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞; —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω;")
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token("7996649984:AAHW_Wxy6PSwJEPlX6RwZBt6JkL3LjtWRQA").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU:    [CallbackQueryHandler(menu_handler)],
            MODEL:   [MessageHandler(filters.TEXT & ~filters.COMMAND, model_received)],
            PHOTO:   [MessageHandler(filters.PHOTO, photo_received)],
            CONTACT: [MessageHandler(filters.CONTACT, contact_received)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling()
